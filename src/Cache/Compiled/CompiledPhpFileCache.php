<?php

declare(strict_types=1);

namespace CuyZ\Valinor\Cache\Compiled;

use CuyZ\Valinor\Cache\Exception\CacheDirectoryNotFound;
use CuyZ\Valinor\Cache\Exception\CompiledPhpCacheFileNotWritten;
use CuyZ\Valinor\Cache\Exception\CorruptedCompiledPhpCacheFile;
use DateInterval;
use DateTime;
use Error;
use FilesystemIterator;
use Psr\SimpleCache\CacheInterface;
use Traversable;

use function file_exists;
use function file_put_contents;
use function implode;
use function is_dir;
use function mkdir;
use function rename;
use function sha1;
use function str_contains;
use function sys_get_temp_dir;
use function time;
use function uniqid;
use function unlink;

/**
 * @internal
 *
 * @template EntryType
 * @implements CacheInterface<EntryType>
 */
final class CompiledPhpFileCache implements CacheInterface
{
    private const GENERATED_MESSAGE = 'Generated by ' . self::class;

    private string $cacheDir;

    private CacheCompiler $compiler;

    /** @var array<PhpCacheFile<EntryType>> */
    private array $files = [];

    public function __construct(string $cacheDir, CacheCompiler $compiler)
    {
        $this->cacheDir = $cacheDir;
        $this->compiler = $compiler;
    }

    public function has($key): bool
    {
        $filename = $this->path($key);

        if (! file_exists($filename)) {
            return false;
        }

        return $this->getFile($filename)->isValid();
    }

    public function get($key, $default = null)
    {
        if (! $this->has($key)) {
            return $default;
        }

        $filename = $this->path($key);

        return $this->getFile($filename)->value();
    }

    public function set($key, $value, $ttl = null): bool
    {
        $code = $this->compile($value, $ttl);

        /** @infection-ignore-all */
        if (! is_dir($this->cacheDir) && ! mkdir($this->cacheDir, 510, true)) {
            throw new CacheDirectoryNotFound($this->cacheDir); // @codeCoverageIgnore
        }

        /** @infection-ignore-all */
        $tmpFilename = sys_get_temp_dir() . DIRECTORY_SEPARATOR . uniqid('', true);
        $filename = $this->path($key);

        file_put_contents($tmpFilename, $code);

        if (! rename($tmpFilename, $filename)) {
            /** @infection-ignore-all */
            // @codeCoverageIgnoreStart
            throw new CompiledPhpCacheFileNotWritten($filename);
            // @codeCoverageIgnoreEnd
        }

        return true;
    }

    public function delete($key): bool
    {
        $filename = $this->path($key);

        if (file_exists($filename)) {
            return unlink($filename);
        }

        return true;
    }

    public function clear(): bool
    {
        $success = true;

        foreach (new FilesystemIterator($this->cacheDir) as $file) {
            /** @var FilesystemIterator $file */
            $line = $file->openFile()->getCurrentLine();

            /** @infection-ignore-all */
            if (! $line || ! str_contains($line, self::GENERATED_MESSAGE)) {
                continue;
            }

            /** @var string $path */
            $path = $file->getRealPath();

            /** @infection-ignore-all */
            $success = unlink($path) && $success;
        }

        return $success;
    }

    /**
     * @return Traversable<string, EntryType>
     */
    public function getMultiple($keys, $default = null): Traversable
    {
        foreach ($keys as $key) {
            yield $key => $this->get($key, $default);
        }
    }

    public function setMultiple($values, $ttl = null): bool
    {
        foreach ($values as $key => $value) {
            $this->set($key, $value, $ttl);
        }

        return true;
    }

    public function deleteMultiple($keys): bool
    {
        $deleted = true;

        foreach ($keys as $key) {
            /** @infection-ignore-all */
            $deleted = $this->delete($key) && $deleted;
        }

        return $deleted;
    }

    /**
     * @param mixed $value
     * @param int|DateInterval|null $ttl
     */
    private function compile($value, $ttl = null): string
    {
        $validation = [];

        if ($ttl) {
            $time = $ttl instanceof DateInterval
                ? (new DateTime())->add($ttl)->getTimestamp()
                : time() + $ttl;

            $validation[] = "time() < $time";
        }

        if ($this->compiler instanceof CacheValidationCompiler) {
            $validation[] = $this->compiler->compileValidation($value);
        }

        $generatedMessage = self::GENERATED_MESSAGE;

        $code = $this->compiler->compile($value);
        $validationCode = empty($validation)
            ? 'true'
            : '(' . implode(' && ', $validation) . ')';

        return <<<PHP
        <?php // $generatedMessage
        return new class(\$this->compiler instanceof \CuyZ\Valinor\Cache\Compiled\HasArguments ? \$this->compiler->arguments() : []) implements \CuyZ\Valinor\Cache\Compiled\PhpCacheFile {
            /** @var array<string, mixed> */
            private array \$arguments;
            
            public function __construct(array \$arguments)
            {
                \$this->arguments = \$arguments;
            }

            public function value()
            {
                return $code;
            }

            public function isValid(): bool
            {
                return $validationCode;
            }
        };
        PHP;
    }

    /**
     * @return PhpCacheFile<EntryType>
     */
    private function getFile(string $filename): PhpCacheFile
    {
        if (! isset($this->files[$filename])) {
            try {
                $object = include $filename;
            } catch (Error $exception) {
                // @PHP8.0 remove variable
            }

            if (! isset($object) || ! $object instanceof PhpCacheFile) {
                throw new CorruptedCompiledPhpCacheFile($filename);
            }

            $this->files[$filename] = $object;
        }

        return $this->files[$filename];
    }

    private function path(string $key): string
    {
        /** @infection-ignore-all */
        return $this->cacheDir . DIRECTORY_SEPARATOR . sha1($key) . '.php';
    }
}
