<?php // Generated by CuyZ\Valinor\Cache\FileSystemCache
return fn (array $transformers, CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate) => new class ($transformers, $delegate) implements CuyZ\Valinor\Normalizer\Transformer\Transformer {
    private array $transformers;

    private CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate;

    public function __construct(array $transformers, CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate)
    {
        $this->transformers = $transformers;
        $this->delegate = $delegate;
    }

    public function transform(mixed $value): mixed
    {
        $references = new WeakMap();
        return $this->transform_object_cuyz_valinor_tests_integration_normalizer_classwithdatetimeinterface_697272ac658921dbf7da725eb7ffc5c3($value, $references);
    }

    private function transform_object_cuyz_valinor_tests_integration_normalizer_classwithdatetimeinterface_697272ac658921dbf7da725eb7ffc5c3(CuyZ\Valinor\Tests\Integration\Normalizer\ClassWithDateTimeInterface $value, WeakMap $references): array
    {
        if (isset($references[$value])) {
            throw new CuyZ\Valinor\Normalizer\Exception\CircularReferenceFoundDuringNormalization($value);
        }
        $references = clone $references;
        $references[$value] = true;
        $values = [
            'date' => $value->date,
        ];
        $transformed = [];
        $transformed['date'] = $values['date']->format('Y-m-d\\TH:i:s.uP');
        return $transformed;
    }
};