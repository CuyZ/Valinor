<?php // Generated by CuyZ\Valinor\Cache\FileSystemCache
return fn (array $transformers, CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate) => new class ($transformers, $delegate) implements CuyZ\Valinor\Normalizer\Transformer\Transformer {
    private array $transformers;

    private CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate;

    public function __construct(array $transformers, CuyZ\Valinor\Normalizer\Transformer\Transformer $delegate)
    {
        $this->transformers = $transformers;
        $this->delegate = $delegate;
    }

    public function transform(mixed $value): mixed
    {
        $references = new WeakMap();
        return $this->transform_object_cuyz_valinor_tests_integration_normalizer_classwithunsealedshapedarray_8ddd6ae4828a3f796a5a41d74f786c00($value, $references);
    }

    private function transform_object_cuyz_valinor_tests_integration_normalizer_classwithunsealedshapedarray_8ddd6ae4828a3f796a5a41d74f786c00(CuyZ\Valinor\Tests\Integration\Normalizer\ClassWithUnsealedShapedArray $value, WeakMap $references): array
    {
        if (isset($references[$value])) {
            throw new CuyZ\Valinor\Normalizer\Exception\CircularReferenceFoundDuringNormalization($value);
        }
        $references = clone $references;
        $references[$value] = $value;
        $values = [
            'shapedArray' => $value->shapedArray,
        ];
        $transformed = [];
        $transformed['shapedArray'] = $this->transform_shaped_array_6e221ad90986e9902ef7a23f87c2f63a($values['shapedArray'], $references);
        return $transformed;
    }

    private function transform_mixed(mixed $value, WeakMap $references): mixed
    {
        if (\is_bool($value)) {
            return $value;
        }
        if (\is_float($value)) {
            return $value;
        }
        if (\is_int($value)) {
            return $value;
        }
        if (\is_string($value)) {
            return $value;
        }
        if ($value === NULL) {
            return NULL;
        }
        if ($value instanceof UnitEnum) {
            return $value instanceof BackedEnum ? $value->value : $value->name;
        }
        if ($value instanceof DateTime) {
            return $value->format('Y-m-d\\TH:i:s.uP');
        }
        if ($value instanceof DateTimeZone) {
            return $value->getName();
        }
        if (\is_iterable($value) && ! $value instanceof Generator) {
            return $this->transform_iterable_mixed_070660c7e72aa3e14a93c1039279afb6($value, $references);
        }
        return $this->delegate->transform($value);
    }

    private function transform_iterable_mixed_070660c7e72aa3e14a93c1039279afb6(iterable $value, WeakMap $references): iterable
    {
        if (\is_array($value)) {
            return \array_map(fn (mixed $item) => $this->transform_mixed($item, $references), $value);
        }
        return (function () use ($value, $references) {
            foreach ($value as $key => $item) {
                yield $key => $this->transform_mixed($item, $references);
            }
        })();
    }

    private function transform_unsure_string_3be84d23fb1096447c64fce6e12d003c(mixed $value, WeakMap $references): mixed
    {
        if (! (\is_string($value))) {
            return $this->transform_mixed($value, $references);
        }
        return $value;
    }

    private function transform_unsure_int_7617cc4b435dae7c97211c6082923b47(mixed $value, WeakMap $references): mixed
    {
        if (! (\is_int($value))) {
            return $this->transform_mixed($value, $references);
        }
        return $value;
    }

    private function transform_shaped_array_6e221ad90986e9902ef7a23f87c2f63a(array $value, WeakMap $references): array
    {
        $result = [];
        foreach ($value as $key => $item) {
            $result[$key] = match ($key) {
                'someString' => $this->transform_unsure_string_3be84d23fb1096447c64fce6e12d003c($item, $references),
                'someInt' => $this->transform_unsure_int_7617cc4b435dae7c97211c6082923b47($item, $references),
                default => $this->transform_unsure_string_3be84d23fb1096447c64fce6e12d003c($item, $references),
            };
        }
        return $result;
    }
};